{"version":3,"sources":["components/ClockItem.js","components/AddClock.js","components/WorldClocks.js","App.js","serviceWorker.js","index.js"],"names":["ClockItem","props","state","hours","minutes","seconds","timeInterval","setClock","bind","handleClose","date","Date","hour","parseInt","getUTCHours","this","clocksSetup","timeZone","minute","getUTCMinutes","second","getUTCSeconds","setState","setInterval","className","name","onClick","clearInterval","onClose","id","Component","AddClock","useState","form","setForm","handleChange","evt","target","value","prevForm","onChange","type","preventDefault","setClocks","shortid","generate","onFormSubmit","WorldClocks","clocks","prevClocks","filter","item","addClocks","map","key","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.601b61f1.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nexport default class ClockItem extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hours: 0,\n      minutes: 0,\n      seconds: 0,\n    };\n    this.timeInterval = null;\n    this.setClock = this.setClock.bind(this);\n    this.handleClose = this.handleClose.bind(this);\n  }\n\n  setClock() {\n    const date = new Date();\n    const hour = parseInt(date.getUTCHours(), 10) + parseInt(this.props.clocksSetup.timeZone, 10);\n    const minute = parseInt(date.getUTCMinutes(), 10);\n    const second = parseInt(date.getUTCSeconds(), 10);\n\n    this.setState({\n      hours: hour,\n      minutes: minute,\n      seconds: second,\n    });\n  }\n\n  componentDidMount() {\n    this.setClock();\n    this.timeInterval = setInterval(this.setClock, 1000);\n  }\n\n  render() {\n    return (\n      <>\n        <div className='item-clock'>\n          <p>{this.props.clocksSetup.name}</p>\n          <p className='timer'>\n            {this.state.hours < 10 ? `0${this.state.hours}` : this.state.hours}:\n            {this.state.minutes < 10 ? `0${this.state.minutes}` : this.state.minutes}:\n            {this.state.seconds < 10 ? `0${this.state.seconds}` : this.state.seconds}</p>\n          <div className=\"close\" onClick={this.handleClose}>&#x2718;</div>\n        </div>\n      </>\n    );\n  }\n\n  componentWillUnmount() {\n    this.timeInterval = clearInterval(this.timeInterval);\n  }\n\n  handleClose() {\n    this.props.onClose(this.props.clocksSetup.id);\n  }\n}\n\nClockItem.propTypes = {\n  clocksSetup: PropTypes.object.isRequired,\n  onClose: PropTypes.func.isRequired,\n};\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport shortid from 'shortid';\n\nexport default function AddClock(props) {\n  const [form, setForm] = useState({\n    name: '',\n    timeZone: '',\n  });\n\n  const handleChange = (evt) => {\n    const { name, value } = evt.target;\n    setForm((prevForm) => ({ ...prevForm, [name]: value }));\n  };\n\n  const handleSubmit = (evt) => {\n    evt.preventDefault();\n    if (form.name !== '' && form.timeZone !== '') {\n      const setClocks = {\n        id: shortid.generate(),\n        name: form.name,\n        timeZone: form.timeZone,\n      };\n\n      props.onFormSubmit(setClocks);\n      setForm({\n        name: '',\n        timeZone: '',\n      });\n    }\n  };\n\n  return (\n    <form>\n      <label>\n        <p className='title'>Название</p>\n        <input name='name' onChange={handleChange} value={form.name} />\n      </label>\n      <label>\n        <p className='title'>Временная зона</p>\n        <input name='timeZone' type='number' onChange={handleChange} value={form.timeZone} />\n      </label>\n      <input type='button' onClick={handleSubmit} value='Добавить' />\n    </form>\n  );\n}\n\nAddClock.propTypes = {\n  onFormSubmit: PropTypes.func.isRequired,\n};\n","import React, { useState } from 'react';\nimport ClockItem from './ClockItem';\nimport AddClock from './AddClock';\n\nexport default function WorldClocks() {\n  const [clocks, setClocks] = useState([]);\n\n  const handleSubmit = (addClocks) => {\n    setClocks((prevClocks) => ([...prevClocks, addClocks]));\n  };\n\n  const handleClose = (id) => {\n    setClocks((prevClocks) => (prevClocks.filter((item) => item.id !== id)));\n  };\n\n  return (\n    <>\n      <AddClock onFormSubmit={handleSubmit} />\n      <div className='clock-list'>\n        {clocks.map((item) => (\n          <ClockItem key={item.id} clocksSetup={item} onClose={handleClose} />\n        ))}\n      </div>\n    </>\n  );\n}\n","import React from 'react';\nimport './App.css';\nimport WorldClocks from './components/WorldClocks';\n\nfunction App() {\n  return (\n    <div className=\"container\">\n      <WorldClocks />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}